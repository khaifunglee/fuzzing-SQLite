-- Create a table that includes different data types
CREATE TABLE department (dept_id INTEGER PRIMARY KEY, dept_name TEXT, location TEXT, budget DECIMAL);

-- Insert rows of data to Table department
INSERT INTO department (dept_name, location, budget) VALUES ('HR', 'New York', 50000.75), ('IT', 'San Francisco', 120000.00), ('Finance', 'Chicago', 75000.50);

-- Query by GROUPBY and AGGREGATE
SELECT dept_name, COUNT(*) AS employee_count, SUM(budget) AS total_budget
FROM department
GROUP BY dept_name
HAVING total_budget > 60000;

-- Query the information of employee who has the highest salary in each department
CREATE TABLE employees (emp_id INTEGER PRIMARY KEY, emp_name TEXT, dept_id INTEGER, salary INTEGER);
INSERT INTO employees (emp_name, dept_id, salary) VALUES ('John', 1, 55000), ('Jane', 2, 130000), ('Doe', 3, 80000);
SELECT emp_name, salary
FROM employees
WHERE salary = (SELECT MAX(salary) FROM employees WHERE dept_id = employees.dept_id);

-- Nested query: Find the employee whose salary is higher than department average
SELECT emp_name, salary
FROM employees e
WHERE salary > (SELECT AVG(salary) FROM employees WHERE dept_id = e.dept_id);

-- Use CASE to categorise employee salary
SELECT emp_name, 
CASE
    WHEN salary > 100000 THEN 'High Salary'
    WHEN salary BETWEEN 60000 AND 100000 THEN 'Medium Salary'
    ELSE 'Low Salary'
END AS salary_category
FROM employees;

-- Use JOIN and UNION to query
SELECT e.emp_name, d.dept_name
FROM employees e
JOIN department d ON e.dept_id = d.dept_id
UNION
SELECT 'Total', COUNT(*) 
FROM employees;

-- Query the salary ranking of employees in each department
SELECT emp_name, salary,
RANK() OVER (PARTITION BY dept_id ORDER BY salary DESC) AS salary_rank
FROM employees;

-- Use recursion to query management hierarchy
WITH RECURSIVE EmployeeHierarchy AS (
    SELECT emp_id, dept_id, 1 AS level
    FROM employees
    WHERE dept_id IS NULL
    UNION ALL
    SELECT e.emp_id, e.dept_id, eh.level + 1
    FROM employees e
    INNER JOIN EmployeeHierarchy eh ON e.dept_id = eh.emp_id
)
SELECT emp_id, dept_id, level
FROM EmployeeHierarchy
ORDER BY level, emp_id;
